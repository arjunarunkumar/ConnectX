        -:    0:Source:ConnectX.cpp
        -:    0:Graph:ConnectX.gcno
        -:    0:Data:ConnectX.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "ConnectX.h"
        -:    2:#include <iostream>
        -:    3:
        -:    4:// constructor provides customized dimensions and number of
        -:    5:// sequential pieces (x) it takes to win the game
function _ZN8ConnectXC2Eiii called 12 returned 100% blocks executed 95%
       12:    6:ConnectX::ConnectX(int wide, int high, int x)
call    0 returned 100%
call    1 never executed
        -:    7:{
        -:    8:	//invalid input resets everything to default settings
       12:    9:	if( wide <= 0 || high <= 0 || x <= 0)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
        -:   10:	{
        6:   11:		wide=DEFAULT_WIDTH;
        6:   12:		high=DEFAULT_HEIGHT;
        6:   13:		x=DEFAULT_TO_WIN;
        -:   14:	}
        -:   15:
       12:   16:	board.resize(high);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       84:   17:	for(int i=0; i<high; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   18:	{
       72:   19:		board[i].resize(wide);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      576:   20:		for(int j=0; j<wide; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:   21:		{
      504:   22:			board[i][j] = EMPTY;
call    0 returned 100%
call    1 returned 100%
        -:   23:		}
        -:   24:	}
       12:   25:	width = wide;
       12:   26:	height = high;
       12:   27:	toWin = x;
       12:   28:	turn = BLACK;
       12:   29:}
        -:   30:
        -:   31:// changes turn to reflect whose turn it is
function _ZN8ConnectX10toggleTurnEv called 26 returned 100% blocks executed 100%
       26:   32:void ConnectX::toggleTurn()
        -:   33:{
       26:   34:	if(turn == WHITE)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:   35:	{
       12:   36:		turn = BLACK;
        -:   37:	}
        -:   38:	else
       14:   39:		turn = WHITE;
       26:   40:}
        -:   41:
        -:   42:// returns whether or not the provided location is a valid
        -:   43:// space in the board
function _ZN8ConnectX8inBoundsEii called 196 returned 100% blocks executed 100%
      196:   44:bool ConnectX::inBounds(int w, int h)
        -:   45:{
        -:   46:	bool inside;
      196:   47:	if( w>=width || w<0 )
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       10:   48:		inside = false;
        -:   49:	else
      186:   50:		inside = true;
        -:   51:
      196:   52:	if( h<0 || h>=height )
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        8:   53:		inside = false;
        -:   54:	else
      188:   55:		inside = true;
        -:   56:
      196:   57:	return inside;
        -:   58:}
        -:   59:
        -:   60:// Prints out the board to the command line, showing both
        -:   61:// empty places and where each player has placed pieces
function _ZN8ConnectX9showBoardEv called 2 returned 100% blocks executed 100%
        2:   62:void ConnectX::showBoard()
        -:   63:{
        2:   64:	std::cout<<"   ";
call    0 returned 100%
       16:   65:	for(int w = 0; w < width; w++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:   66:	{
       14:   67:		std::cout<<"["<<w<<"]";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   68:	}
        2:   69:	std::cout<<std::endl;
call    0 returned 100%
       14:   70:	for(int h = 0; h < height; h++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   71:	{
       12:   72:		std::cout<<"["<<h<<"]";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       96:   73:		for(int w = 0; w < width; w++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:   74:		{
        -:   75:			char place;
       84:   76:			Piece val = at(w,h);
call    0 returned 100%
       84:   77:			if(val == BLACK)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       12:   78:				place = 'B';
       72:   79:			else if( val == WHITE )
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:   80:				place = 'W';
        -:   81:			else
       64:   82:				place = ' ';
       84:   83:			std::cout<<"["<<place<<"]";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   84:		}
       12:   85:		std::cout<<std::endl;
call    0 returned 100%
        -:   86:	}
        2:   87:}
        -:   88:
        -:   89:// Returns whose turn it is (BLACK or WHITE)
function _ZN8ConnectX9whoseTurnEv called 2 returned 100% blocks executed 100%
        2:   90:Piece ConnectX::whoseTurn()
        -:   91:{
        2:   92:	return turn;
        -:   93:}
        -:   94:
        -:   95:// Retrieves the value at a provided (w,h) location in the board or returns
        -:   96:// INVALID if the provided location is not within the board
function _ZN8ConnectX2atEii called 174 returned 100% blocks executed 100%
      174:   97:Piece ConnectX::at(int w, int h)
        -:   98:{
      174:   99:	if( inBounds(w,h) )
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
        -:  100:	{
      166:  101:		return board[h][w];
call    0 returned 100%
call    1 returned 100%
        -:  102:	}
        -:  103:	else
        8:  104:		return INVALID;
        -:  105:}
        -:  106:
        -:  107:// Puts the current player's piece in a vertical column, where the piece falls
        -:  108:// to the lowest empty position available in the board. Placing a piece in a
        -:  109:// "bad" column (such as a column that doesn't exist or is already full of
        -:  110:// pieces) results in the player just losing their turn
function _ZN8ConnectX10placePieceEi called 26 returned 100% blocks executed 100%
       26:  111:void ConnectX::placePiece(int column)
        -:  112:{
       80:  113:	for(int i=height-1; i>=0; i--)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  114:	{
       76:  115:		if( at(column,i) == EMPTY && inBounds(column,i) )
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 29% (fallthrough)
branch  7 taken 71%
        -:  116:		{
       22:  117:			board[i][column] = turn;
call    0 returned 100%
call    1 returned 100%
       22:  118:			break;
        -:  119:		}
        -:  120:	}
        -:  121:
       26:  122:	toggleTurn();
call    0 returned 100%
function _GLOBAL__sub_I__ZN8ConnectXC2Eiii called 2 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 2 returned 100% blocks executed 100%
       32:  123:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
